//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `XXXJobTransaction.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __XXXJobTransaction_h__
#define __XXXJobTransaction_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace XXXJobTrans
{

class XXXJobWorker;
class XXXJobWorkerPrx;
class XXXJobDirector;
class XXXJobDirectorPrx;

}

namespace XXXJobTrans
{

using ByteSeq = ::std::vector<::Ice::Byte>;

}

namespace XXXJobTrans
{

class XXXJobWorker : public virtual ::Ice::Object
{
public:

    using ProxyType = XXXJobWorkerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void processXXXItem(::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> data, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_processXXXItem(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void processYYYItem(::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> data, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_processYYYItem(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class XXXJobDirector : public virtual ::Ice::Object
{
public:

    using ProxyType = XXXJobDirectorPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool compete(::std::shared_ptr<XXXJobWorkerPrx> worker, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_compete(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void onXXXResult(int result, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_onXXXResult(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void onYYYResult(int result, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_onYYYResult(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace XXXJobTrans
{

class XXXJobWorkerPrx : public virtual ::Ice::Proxy<XXXJobWorkerPrx, ::Ice::ObjectPrx>
{
public:

    void processXXXItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &XXXJobWorkerPrx::_iceI_processXXXItem, data, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto processXXXItemAsync(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &XXXJobWorkerPrx::_iceI_processXXXItem, data, context);
    }

    ::std::function<void()>
    processXXXItemAsync(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &XXXJobTrans::XXXJobWorkerPrx::_iceI_processXXXItem, data, context);
    }

    /// \cond INTERNAL
    void _iceI_processXXXItem(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context&);
    /// \endcond

    void processYYYItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &XXXJobWorkerPrx::_iceI_processYYYItem, data, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto processYYYItemAsync(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &XXXJobWorkerPrx::_iceI_processYYYItem, data, context);
    }

    ::std::function<void()>
    processYYYItemAsync(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &XXXJobTrans::XXXJobWorkerPrx::_iceI_processYYYItem, data, context);
    }

    /// \cond INTERNAL
    void _iceI_processYYYItem(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &XXXJobWorkerPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &XXXJobWorkerPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &XXXJobTrans::XXXJobWorkerPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    XXXJobWorkerPrx() = default;
    friend ::std::shared_ptr<XXXJobWorkerPrx> IceInternal::createProxy<XXXJobWorkerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class XXXJobDirectorPrx : public virtual ::Ice::Proxy<XXXJobDirectorPrx, ::Ice::ObjectPrx>
{
public:

    bool compete(const ::std::shared_ptr<XXXJobWorkerPrx>& worker, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &XXXJobDirectorPrx::_iceI_compete, worker, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto competeAsync(const ::std::shared_ptr<XXXJobWorkerPrx>& worker, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &XXXJobDirectorPrx::_iceI_compete, worker, context);
    }

    ::std::function<void()>
    competeAsync(const ::std::shared_ptr<XXXJobWorkerPrx>& worker,
                 ::std::function<void(bool)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &XXXJobTrans::XXXJobDirectorPrx::_iceI_compete, worker, context);
    }

    /// \cond INTERNAL
    void _iceI_compete(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::std::shared_ptr<XXXJobWorkerPrx>&, const ::Ice::Context&);
    /// \endcond

    void onXXXResult(int result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &XXXJobDirectorPrx::_iceI_onXXXResult, result, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto onXXXResultAsync(int result, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &XXXJobDirectorPrx::_iceI_onXXXResult, result, context);
    }

    ::std::function<void()>
    onXXXResultAsync(int result,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &XXXJobTrans::XXXJobDirectorPrx::_iceI_onXXXResult, result, context);
    }

    /// \cond INTERNAL
    void _iceI_onXXXResult(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    void onYYYResult(int result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &XXXJobDirectorPrx::_iceI_onYYYResult, result, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto onYYYResultAsync(int result, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &XXXJobDirectorPrx::_iceI_onYYYResult, result, context);
    }

    ::std::function<void()>
    onYYYResultAsync(int result,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &XXXJobTrans::XXXJobDirectorPrx::_iceI_onYYYResult, result, context);
    }

    /// \cond INTERNAL
    void _iceI_onYYYResult(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    XXXJobDirectorPrx() = default;
    friend ::std::shared_ptr<XXXJobDirectorPrx> IceInternal::createProxy<XXXJobDirectorPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace XXXJobTrans
{

using XXXJobWorkerPtr = ::std::shared_ptr<XXXJobWorker>;
using XXXJobWorkerPrxPtr = ::std::shared_ptr<XXXJobWorkerPrx>;

using XXXJobDirectorPtr = ::std::shared_ptr<XXXJobDirector>;
using XXXJobDirectorPrxPtr = ::std::shared_ptr<XXXJobDirectorPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace XXXJobTrans
{

class XXXJobWorker;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< XXXJobWorker>&);
::IceProxy::Ice::Object* upCast(XXXJobWorker*);
/// \endcond

class XXXJobDirector;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< XXXJobDirector>&);
::IceProxy::Ice::Object* upCast(XXXJobDirector*);
/// \endcond

}

}

namespace XXXJobTrans
{

class XXXJobWorker;
/// \cond INTERNAL
::Ice::Object* upCast(XXXJobWorker*);
/// \endcond
typedef ::IceInternal::Handle< XXXJobWorker> XXXJobWorkerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::XXXJobTrans::XXXJobWorker> XXXJobWorkerPrx;
typedef XXXJobWorkerPrx XXXJobWorkerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(XXXJobWorkerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class XXXJobDirector;
/// \cond INTERNAL
::Ice::Object* upCast(XXXJobDirector*);
/// \endcond
typedef ::IceInternal::Handle< XXXJobDirector> XXXJobDirectorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::XXXJobTrans::XXXJobDirector> XXXJobDirectorPrx;
typedef XXXJobDirectorPrx XXXJobDirectorPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(XXXJobDirectorPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace XXXJobTrans
{

typedef ::std::vector< ::Ice::Byte> ByteSeq;

}

namespace XXXJobTrans
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobWorker_processXXXItem.
 */
class Callback_XXXJobWorker_processXXXItem_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_XXXJobWorker_processXXXItem_Base> Callback_XXXJobWorker_processXXXItemPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobWorker_processYYYItem.
 */
class Callback_XXXJobWorker_processYYYItem_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_XXXJobWorker_processYYYItem_Base> Callback_XXXJobWorker_processYYYItemPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobWorker_shutdown.
 */
class Callback_XXXJobWorker_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_XXXJobWorker_shutdown_Base> Callback_XXXJobWorker_shutdownPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::XXXJobTrans::XXXJobDirector::begin_compete.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobDirector_compete.
 */
class Callback_XXXJobDirector_compete_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_XXXJobDirector_compete_Base> Callback_XXXJobDirector_competePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobDirector_onXXXResult.
 */
class Callback_XXXJobDirector_onXXXResult_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_XXXJobDirector_onXXXResult_Base> Callback_XXXJobDirector_onXXXResultPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobDirector_onYYYResult.
 */
class Callback_XXXJobDirector_onYYYResult_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_XXXJobDirector_onYYYResult_Base> Callback_XXXJobDirector_onYYYResultPtr;

}

namespace IceProxy
{

namespace XXXJobTrans
{

class XXXJobWorker : public virtual ::Ice::Proxy<XXXJobWorker, ::IceProxy::Ice::Object>
{
public:

    void processXXXItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_processXXXItem(_iceI_begin_processXXXItem(data, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_processXXXItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_processXXXItem(data, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processXXXItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_processXXXItem(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_processXXXItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_processXXXItem(data, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_processXXXItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::XXXJobTrans::Callback_XXXJobWorker_processXXXItemPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_processXXXItem(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_processXXXItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context, const ::XXXJobTrans::Callback_XXXJobWorker_processXXXItemPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_processXXXItem(data, context, cb, cookie);
    }

    void end_processXXXItem(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_processXXXItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void processYYYItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_processYYYItem(_iceI_begin_processYYYItem(data, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_processYYYItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_processYYYItem(data, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processYYYItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_processYYYItem(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_processYYYItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_processYYYItem(data, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_processYYYItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::XXXJobTrans::Callback_XXXJobWorker_processYYYItemPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_processYYYItem(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_processYYYItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Context& context, const ::XXXJobTrans::Callback_XXXJobWorker_processYYYItemPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_processYYYItem(data, context, cb, cookie);
    }

    void end_processYYYItem(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_processYYYItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::XXXJobTrans::Callback_XXXJobWorker_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::XXXJobTrans::Callback_XXXJobWorker_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class XXXJobDirector : public virtual ::Ice::Proxy<XXXJobDirector, ::IceProxy::Ice::Object>
{
public:

    bool compete(const ::XXXJobTrans::XXXJobWorkerPrx& worker, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_compete(_iceI_begin_compete(worker, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_compete(const ::XXXJobTrans::XXXJobWorkerPrx& worker, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_compete(worker, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_compete(const ::XXXJobTrans::XXXJobWorkerPrx& worker, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_compete(worker, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_compete(const ::XXXJobTrans::XXXJobWorkerPrx& worker, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_compete(worker, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_compete(const ::XXXJobTrans::XXXJobWorkerPrx& worker, const ::XXXJobTrans::Callback_XXXJobDirector_competePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_compete(worker, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_compete(const ::XXXJobTrans::XXXJobWorkerPrx& worker, const ::Ice::Context& context, const ::XXXJobTrans::Callback_XXXJobDirector_competePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_compete(worker, context, cb, cookie);
    }

    bool end_compete(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_compete(const ::XXXJobTrans::XXXJobWorkerPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void onXXXResult(::Ice::Int result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_onXXXResult(_iceI_begin_onXXXResult(result, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_onXXXResult(::Ice::Int result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_onXXXResult(result, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onXXXResult(::Ice::Int result, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onXXXResult(result, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onXXXResult(::Ice::Int result, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onXXXResult(result, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onXXXResult(::Ice::Int result, const ::XXXJobTrans::Callback_XXXJobDirector_onXXXResultPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onXXXResult(result, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onXXXResult(::Ice::Int result, const ::Ice::Context& context, const ::XXXJobTrans::Callback_XXXJobDirector_onXXXResultPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onXXXResult(result, context, cb, cookie);
    }

    void end_onXXXResult(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_onXXXResult(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void onYYYResult(::Ice::Int result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_onYYYResult(_iceI_begin_onYYYResult(result, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_onYYYResult(::Ice::Int result, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_onYYYResult(result, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onYYYResult(::Ice::Int result, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onYYYResult(result, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onYYYResult(::Ice::Int result, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onYYYResult(result, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onYYYResult(::Ice::Int result, const ::XXXJobTrans::Callback_XXXJobDirector_onYYYResultPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onYYYResult(result, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onYYYResult(::Ice::Int result, const ::Ice::Context& context, const ::XXXJobTrans::Callback_XXXJobDirector_onYYYResultPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onYYYResult(result, context, cb, cookie);
    }

    void end_onYYYResult(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_onYYYResult(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace XXXJobTrans
{

class XXXJobWorker : public virtual ::Ice::Object
{
public:

    typedef XXXJobWorkerPrx ProxyType;
    typedef XXXJobWorkerPtr PointerType;

    virtual ~XXXJobWorker();

#ifdef ICE_CPP11_COMPILER
    XXXJobWorker() = default;
    XXXJobWorker(const XXXJobWorker&) = default;
    XXXJobWorker& operator=(const XXXJobWorker&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void processXXXItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_processXXXItem(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void processYYYItem(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& data, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_processYYYItem(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const XXXJobWorker& lhs, const XXXJobWorker& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const XXXJobWorker& lhs, const XXXJobWorker& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class XXXJobDirector : public virtual ::Ice::Object
{
public:

    typedef XXXJobDirectorPrx ProxyType;
    typedef XXXJobDirectorPtr PointerType;

    virtual ~XXXJobDirector();

#ifdef ICE_CPP11_COMPILER
    XXXJobDirector() = default;
    XXXJobDirector(const XXXJobDirector&) = default;
    XXXJobDirector& operator=(const XXXJobDirector&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool compete(const XXXJobWorkerPrx& worker, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_compete(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void onXXXResult(::Ice::Int result, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_onXXXResult(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void onYYYResult(::Ice::Int result, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_onYYYResult(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const XXXJobDirector& lhs, const XXXJobDirector& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const XXXJobDirector& lhs, const XXXJobDirector& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace XXXJobTrans
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobWorker_processXXXItem.
 */
template<class T>
class CallbackNC_XXXJobWorker_processXXXItem : public Callback_XXXJobWorker_processXXXItem_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_XXXJobWorker_processXXXItem(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 */
template<class T> Callback_XXXJobWorker_processXXXItemPtr
newCallback_XXXJobWorker_processXXXItem(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_processXXXItem<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 */
template<class T> Callback_XXXJobWorker_processXXXItemPtr
newCallback_XXXJobWorker_processXXXItem(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_processXXXItem<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 */
template<class T> Callback_XXXJobWorker_processXXXItemPtr
newCallback_XXXJobWorker_processXXXItem(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_processXXXItem<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 */
template<class T> Callback_XXXJobWorker_processXXXItemPtr
newCallback_XXXJobWorker_processXXXItem(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_processXXXItem<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobWorker_processXXXItem.
 */
template<class T, typename CT>
class Callback_XXXJobWorker_processXXXItem : public Callback_XXXJobWorker_processXXXItem_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_XXXJobWorker_processXXXItem(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 */
template<class T, typename CT> Callback_XXXJobWorker_processXXXItemPtr
newCallback_XXXJobWorker_processXXXItem(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_processXXXItem<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 */
template<class T, typename CT> Callback_XXXJobWorker_processXXXItemPtr
newCallback_XXXJobWorker_processXXXItem(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_processXXXItem<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 */
template<class T, typename CT> Callback_XXXJobWorker_processXXXItemPtr
newCallback_XXXJobWorker_processXXXItem(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_processXXXItem<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processXXXItem.
 */
template<class T, typename CT> Callback_XXXJobWorker_processXXXItemPtr
newCallback_XXXJobWorker_processXXXItem(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_processXXXItem<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobWorker_processYYYItem.
 */
template<class T>
class CallbackNC_XXXJobWorker_processYYYItem : public Callback_XXXJobWorker_processYYYItem_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_XXXJobWorker_processYYYItem(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 */
template<class T> Callback_XXXJobWorker_processYYYItemPtr
newCallback_XXXJobWorker_processYYYItem(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_processYYYItem<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 */
template<class T> Callback_XXXJobWorker_processYYYItemPtr
newCallback_XXXJobWorker_processYYYItem(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_processYYYItem<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 */
template<class T> Callback_XXXJobWorker_processYYYItemPtr
newCallback_XXXJobWorker_processYYYItem(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_processYYYItem<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 */
template<class T> Callback_XXXJobWorker_processYYYItemPtr
newCallback_XXXJobWorker_processYYYItem(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_processYYYItem<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobWorker_processYYYItem.
 */
template<class T, typename CT>
class Callback_XXXJobWorker_processYYYItem : public Callback_XXXJobWorker_processYYYItem_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_XXXJobWorker_processYYYItem(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 */
template<class T, typename CT> Callback_XXXJobWorker_processYYYItemPtr
newCallback_XXXJobWorker_processYYYItem(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_processYYYItem<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 */
template<class T, typename CT> Callback_XXXJobWorker_processYYYItemPtr
newCallback_XXXJobWorker_processYYYItem(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_processYYYItem<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 */
template<class T, typename CT> Callback_XXXJobWorker_processYYYItemPtr
newCallback_XXXJobWorker_processYYYItem(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_processYYYItem<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_processYYYItem.
 */
template<class T, typename CT> Callback_XXXJobWorker_processYYYItemPtr
newCallback_XXXJobWorker_processYYYItem(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_processYYYItem<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobWorker_shutdown.
 */
template<class T>
class CallbackNC_XXXJobWorker_shutdown : public Callback_XXXJobWorker_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_XXXJobWorker_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 */
template<class T> Callback_XXXJobWorker_shutdownPtr
newCallback_XXXJobWorker_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 */
template<class T> Callback_XXXJobWorker_shutdownPtr
newCallback_XXXJobWorker_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 */
template<class T> Callback_XXXJobWorker_shutdownPtr
newCallback_XXXJobWorker_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 */
template<class T> Callback_XXXJobWorker_shutdownPtr
newCallback_XXXJobWorker_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobWorker_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobWorker_shutdown.
 */
template<class T, typename CT>
class Callback_XXXJobWorker_shutdown : public Callback_XXXJobWorker_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_XXXJobWorker_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 */
template<class T, typename CT> Callback_XXXJobWorker_shutdownPtr
newCallback_XXXJobWorker_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 */
template<class T, typename CT> Callback_XXXJobWorker_shutdownPtr
newCallback_XXXJobWorker_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 */
template<class T, typename CT> Callback_XXXJobWorker_shutdownPtr
newCallback_XXXJobWorker_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobWorker::begin_shutdown.
 */
template<class T, typename CT> Callback_XXXJobWorker_shutdownPtr
newCallback_XXXJobWorker_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobWorker_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::XXXJobTrans::XXXJobDirector::begin_compete.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobDirector_compete.
 */
template<class T>
class CallbackNC_XXXJobDirector_compete : public Callback_XXXJobDirector_compete_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_XXXJobDirector_compete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        XXXJobDirectorPrx proxy = XXXJobDirectorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_compete(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_compete.
 */
template<class T> Callback_XXXJobDirector_competePtr
newCallback_XXXJobDirector_compete(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_compete<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_compete.
 */
template<class T> Callback_XXXJobDirector_competePtr
newCallback_XXXJobDirector_compete(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_compete<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::XXXJobTrans::XXXJobDirector::begin_compete.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobDirector_compete.
 */
template<class T, typename CT>
class Callback_XXXJobDirector_compete : public Callback_XXXJobDirector_compete_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_XXXJobDirector_compete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        XXXJobDirectorPrx proxy = XXXJobDirectorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_compete(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_compete.
 */
template<class T, typename CT> Callback_XXXJobDirector_competePtr
newCallback_XXXJobDirector_compete(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_compete<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_compete.
 */
template<class T, typename CT> Callback_XXXJobDirector_competePtr
newCallback_XXXJobDirector_compete(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_compete<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobDirector_onXXXResult.
 */
template<class T>
class CallbackNC_XXXJobDirector_onXXXResult : public Callback_XXXJobDirector_onXXXResult_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_XXXJobDirector_onXXXResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 */
template<class T> Callback_XXXJobDirector_onXXXResultPtr
newCallback_XXXJobDirector_onXXXResult(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_onXXXResult<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 */
template<class T> Callback_XXXJobDirector_onXXXResultPtr
newCallback_XXXJobDirector_onXXXResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_onXXXResult<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 */
template<class T> Callback_XXXJobDirector_onXXXResultPtr
newCallback_XXXJobDirector_onXXXResult(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_onXXXResult<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 */
template<class T> Callback_XXXJobDirector_onXXXResultPtr
newCallback_XXXJobDirector_onXXXResult(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_onXXXResult<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobDirector_onXXXResult.
 */
template<class T, typename CT>
class Callback_XXXJobDirector_onXXXResult : public Callback_XXXJobDirector_onXXXResult_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_XXXJobDirector_onXXXResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 */
template<class T, typename CT> Callback_XXXJobDirector_onXXXResultPtr
newCallback_XXXJobDirector_onXXXResult(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_onXXXResult<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 */
template<class T, typename CT> Callback_XXXJobDirector_onXXXResultPtr
newCallback_XXXJobDirector_onXXXResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_onXXXResult<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 */
template<class T, typename CT> Callback_XXXJobDirector_onXXXResultPtr
newCallback_XXXJobDirector_onXXXResult(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_onXXXResult<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onXXXResult.
 */
template<class T, typename CT> Callback_XXXJobDirector_onXXXResultPtr
newCallback_XXXJobDirector_onXXXResult(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_onXXXResult<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobDirector_onYYYResult.
 */
template<class T>
class CallbackNC_XXXJobDirector_onYYYResult : public Callback_XXXJobDirector_onYYYResult_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_XXXJobDirector_onYYYResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 */
template<class T> Callback_XXXJobDirector_onYYYResultPtr
newCallback_XXXJobDirector_onYYYResult(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_onYYYResult<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 */
template<class T> Callback_XXXJobDirector_onYYYResultPtr
newCallback_XXXJobDirector_onYYYResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_onYYYResult<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 */
template<class T> Callback_XXXJobDirector_onYYYResultPtr
newCallback_XXXJobDirector_onYYYResult(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_onYYYResult<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 */
template<class T> Callback_XXXJobDirector_onYYYResultPtr
newCallback_XXXJobDirector_onYYYResult(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_XXXJobDirector_onYYYResult<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 * Create a wrapper instance by calling ::XXXJobTrans::newCallback_XXXJobDirector_onYYYResult.
 */
template<class T, typename CT>
class Callback_XXXJobDirector_onYYYResult : public Callback_XXXJobDirector_onYYYResult_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_XXXJobDirector_onYYYResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 */
template<class T, typename CT> Callback_XXXJobDirector_onYYYResultPtr
newCallback_XXXJobDirector_onYYYResult(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_onYYYResult<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 */
template<class T, typename CT> Callback_XXXJobDirector_onYYYResultPtr
newCallback_XXXJobDirector_onYYYResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_onYYYResult<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 */
template<class T, typename CT> Callback_XXXJobDirector_onYYYResultPtr
newCallback_XXXJobDirector_onYYYResult(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_onYYYResult<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::XXXJobTrans::XXXJobDirector::begin_onYYYResult.
 */
template<class T, typename CT> Callback_XXXJobDirector_onYYYResultPtr
newCallback_XXXJobDirector_onYYYResult(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_XXXJobDirector_onYYYResult<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
